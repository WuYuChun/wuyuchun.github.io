I""+<p>listi</p>

<p>[15:40 ]</p>

<h1 id="前言">前言</h1>
<p>前面大概讲解一下glog的关键类，下面将会针对与LogMessage类。以下代码由于glog进行裁剪过来的。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//用于输出消息，当写满消息后，调用析构函数，使用Flush
class GOOGLE_GLOG_DLL_DECL LogMessage {
public:
  enum {
    kNoLogPrefix = -1
  };

  class GOOGLE_GLOG_DLL_DECL LogStream : public std::ostream {

  public:
    LogStream(char *buf, int len, int ctr)
        : std::ostream(NULL),
          streambuf_(buf, len),
          ctr_(ctr),
          self_(this) {
      rdbuf(&amp;streambuf_);
    }

    int ctr() const { return ctr_; }
    void set_ctr(int ctr) { ctr_ = ctr; }
    LogStream* self() const { return self_; }

    // Legacy std::streambuf methods.
    size_t pcount() const { return streambuf_.pcount(); }
    char* pbase() const { return streambuf_.pbase(); }
    char* str() const { return pbase(); }

  private:
    LogStream(const LogStream&amp;);  //！对象语义 而不是值语义
    LogStream&amp; operator=(const LogStream&amp;); //！对象语义 而不是值语义
    base_logging::LogStreamBuf streambuf_;
    int ctr_;  // Counter hack (for the LOG_EVERY_X() macro)
    LogStream *self_;  // Consistency check hack
  };

public:
  // icc 8 requires this typedef to avoid an internal compiler error.
  typedef void (LogMessage::*SendMethod)();

  LogMessage(const char* file, int line, LogSeverity severity, int ctr,
             SendMethod send_method);

  // Two special constructors that generate reduced amounts of code at
  // LOG call sites for common cases.

  // Used for LOG(INFO): Implied are:
  // severity = INFO, ctr = 0, send_method = &amp;LogMessage::SendToLog.
  //
  // Using this constructor instead of the more complex constructor above
  // saves 19 bytes per call site.
  LogMessage(const char* file, int line);

  // Used for LOG(severity) where severity != INFO.  Implied
  // are: ctr = 0, send_method = &amp;LogMessage::SendToLog
  //
  // Using this constructor instead of the more complex constructor above
  // saves 17 bytes per call site.
  LogMessage(const char* file, int line, LogSeverity severity);

  // Constructor to log this message to a specified sink (if not NULL).
  // Implied are: ctr = 0, send_method = &amp;LogMessage::SendToSinkAndLog if
  // also_send_to_log is true, send_method = &amp;LogMessage::SendToSink otherwise.
  LogMessage(const char* file, int line, LogSeverity severity, LogSink* sink,
             bool also_send_to_log);

  // Constructor where we also give a vector&lt;string&gt; pointer
  // for storing the messages (if the pointer is not NULL).
  // Implied are: ctr = 0, send_method = &amp;LogMessage::SaveOrSendToLog.
  LogMessage(const char* file, int line, LogSeverity severity,
             std::vector&lt;std::string&gt;* outvec);

  // Constructor where we also give a string pointer for storing the
  // message (if the pointer is not NULL).  Implied are: ctr = 0,
  // send_method = &amp;LogMessage::WriteToStringAndLog.
  LogMessage(const char* file, int line, LogSeverity severity,
             std::string* message);

  // A special constructor used for check failures
  LogMessage(const char* file, int line, const CheckOpString&amp; result);

  ~LogMessage();

  // Flush a buffered message to the sink set in the constructor.  Always
  // called by the destructor, it may also be called from elsewhere if
  // needed.  Only the first call is actioned; any later ones are ignored.
  void Flush();

  // An arbitrary limit on the length of a single log message.  This
  // is so that streaming can be done more efficiently.
  static const size_t kMaxLogMessageLen;

  // Theses should not be called directly outside of logging.*,
  // only passed as SendMethod arguments to other LogMessage methods:
  void SendToLog();  // Actually dispatch to the logs
  void SendToSyslogAndLog();  // Actually dispatch to syslog and the logs

  // Call abort() or similar to perform LOG(FATAL) crash.
  static void  Fail();

  std::ostream&amp; stream();

  int preserved_errno() const;

  // Must be called without the log_mutex held.  (L &lt; log_mutex)
  static int64 num_messages(int severity);

  struct LogMessageData;

private:
  // Fully internal SendMethod cases:
  void SendToSinkAndLog();  // Send to sink if provided and dispatch to the logs
  void SendToSink();  // Send to sink if provided, do nothing otherwise.

  // Write to string if provided and dispatch to the logs.
  void WriteToStringAndLog();

  void SaveOrSendToLog();  // Save to stringvec if provided, else to logs

  void Init(const char* file, int line, LogSeverity severity,
            void (LogMessage::*send_method)());

  // Used to fill in crash information during LOG(FATAL) failures.
  void RecordCrashReason(glog_internal_namespace_::CrashReason* reason);

  // Counts of messages sent at each priority:
  static int64 num_messages_[NUM_SEVERITIES];  // under log_mutex

  // We keep the data in a separate struct so that each instance of
  // LogMessage uses less stack space.
  LogMessageData* allocated_;
  LogMessageData* data_;

  friend class LogDestination;

  LogMessage(const LogMessage&amp;); //！对象语义 而不是值语义
  void operator=(const LogMessage&amp;);//！对象语义 而不是值语义
};
</code></pre></div></div>
<p>从源码中，LogMessage有很多的构造函数。<strong>在源码中有说明最好不要使用LogMessage的构造函数来生成日志信息</strong>。下面用其的构造函数来生成日记信息，看看效果如何：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>int main(int argc , char * argv[]){

	google::InitGoogleLogging(argv[0]);
	std::string strMsg = "string";
	const char *file = "file";
	google::LogMessage myLog(file, 20, 0, &amp;strMsg);
	myLog.stream() &lt;&lt; "test!!!!!";
	myLog.Flush();
	return EXIT_SUCCESS;
}
</code></pre></div></div>

<p>打印出来的日记信息：</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Log file created at: 2016/09/10 17:00:38
Running on machine: WUYUCHUN-PC
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0910 17:00:38.834996  4088 file:20] test!!!!!
</code></pre></div></div>
<p>从结果中看来与使用  <strong>LOG(INFO)«“test!!!!!”</strong>  的效果是一样的，从这里也可以看出调用流程。</p>

<h1 id="原理">原理</h1>
<p>glog借助ostream来实现日记消息的输出，通过对ostream进行继承重写定义自己的输出的格式，从以上的代码就可以看出。在这里先提示ostream如何进行 <strong>“类型可扩展”</strong> 。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class Date{
public:
    Date(int year,int month, int day):year_(year),month_(month),day_(day){
        ;
    }
    void writeTo(std::ostream &amp;os) const{
        os &lt;&lt; year_ &lt;&lt; month_ &lt;&lt; day_;
    }
private:
    int year_,month_,data_;
}

std::ostream &amp;operator &lt;&lt; (std::ostream, const Date &amp;date){
    data.writeTo(os);
    return os;
}

int main(int argc, char *argv[]){
    Date date(2000,0,0);
    std::cout &lt;&lt; date &lt;&lt; std::endl;
}

</code></pre></div></div>
<p>从这里可以看出，glog在输出消息的时候选用ostream，以便能自己进行扩展。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// Output the COUNTER value. This is only valid if ostream is a
// LogStream.
ostream&amp; operator&lt;&lt;(ostream &amp;os, const PRIVATE_Counter&amp;) {
#ifdef DISABLE_RTTI
	LogMessage::LogStream *log = static_cast&lt;LogMessage::LogStream*&gt;(&amp;os);
#else
	LogMessage::LogStream *log = dynamic_cast&lt;LogMessage::LogStream*&gt;(&amp;os);
#endif
	CHECK(log &amp;&amp; log == log-&gt;self())
		&lt;&lt; "You must not use COUNTER with non-glog ostream";
	os &lt;&lt; log-&gt;ctr();
	return os;
}
</code></pre></div></div>

<blockquote>
  <p>iostream 的另外一个问题是线程安全性。stdio 的函数是线程安全的，而且 C 语言还提供了 flockfile(3)/funlockfile(3) 之类的函数来明确控制 FILE* 的加锁与解锁。
iostream 在线程安全方面没有保证，就算单个 operator« 是线程安全的，也不能保证原子性。因为 cout « a « b; 是两次函数调用，
相当于 cout.operator«(a).operator«(b)。两次调用中间可能会被打断进行上下文切换，造成输出内容不连续，插入了其他线程打印的字符。
而 fprintf(stdout, “%s %d”, a, b); 是一次函数调用，而且是线程安全的，打印的内容不会受其他线程影响。因此，iostream 并不适合在多线程程序中做 logging。
<a href="http://www.cnblogs.com/Solstice/archive/2011/07/17/2108715.html">链接</a></p>
</blockquote>

<p>glog使用LogMessageData数据结构来组织消息，代码给出的解释的为 <strong>we keep the data in a spearate struct so that each instance of LogMessage uses less stack 
space</strong></p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>struct LogMessage::LogMessageData  {
	LogMessageData();

	int preserved_errno_;      // preserved errno
	// Buffer space; contains complete message text.
	char message_text_[LogMessage::kMaxLogMessageLen+1];
	LogStream stream_;
	char severity_;      // What level is this LogMessage logged at?
	int line_;                 // line number where logging call is.
	void (LogMessage::*send_method_)();  // Call this in destructor to send
	union {  // At most one of these is used: union to keep the size low.
		LogSink* sink_;             // NULL or sink to send message to
		std::vector&lt;std::string&gt;* outvec_; // NULL or vector to push message onto
		std::string* message_;             // NULL or string to write message into
	};
	time_t timestamp_;            // Time of creation of LogMessage
	struct ::tm tm_time_;         // Time of creation of LogMessage
	size_t num_prefix_chars_;     // # of chars of prefix in this message
	size_t num_chars_to_log_;     // # of chars of msg to send to log
	size_t num_chars_to_syslog_;  // # of chars of msg to send to syslog
	const char* basename_;        // basename of file that called LOG
	const char* fullname_;        // fullname of file that called LOG
	bool has_been_flushed_;       // false =&gt; data has not been flushed
	bool first_fatal_;            // true =&gt; this was first fatal msg

private:
	LogMessageData(const LogMessageData&amp;);
	void operator=(const LogMessageData&amp;);
};
</code></pre></div></div>

<h1 id="结论">结论</h1>
<p>从Logmessage类的继承组合来说，跟iostream中的继承和组合类似，这就是C++ I/O中输出。下图给出了一张图，也许更能说明问题。</p>

<p><img src="http://images.cnblogs.com/cnblogs_com/Solstice/201107/201107171508102461.png" alt="" /></p>
:ET