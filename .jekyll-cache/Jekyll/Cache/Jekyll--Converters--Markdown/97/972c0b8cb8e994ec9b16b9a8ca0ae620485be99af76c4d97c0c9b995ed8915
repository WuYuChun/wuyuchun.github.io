I"J#<ul>
  <li>1、控件到 <code class="highlighter-rouge">window</code> 的层级关系:</li>
  <li>2、分析控件的详细路径:</li>
  <li>3、动态修改控件:</li>
  <li>4、工具篇:</li>
</ul>

<h3 id="视图的层级关系">视图的层级关系</h3>

<p>每个 <code class="highlighter-rouge">App</code> , 至少有一个根 <code class="highlighter-rouge">Window</code> , 通常情况下我们只用一个 。<code class="highlighter-rouge">window</code> 有一个 <code class="highlighter-rouge">rootViewController</code> , 这就是我们所谓的根视图 , 我们所有的控制器都是放在 <code class="highlighter-rouge">rootViewController</code> 里面的。</p>

<p>如果在项目里有了这么一个路径 , 我们可以做什么呢？</p>

<ul>
  <li>在当项目很复杂 , 可以其它地方可以直接修改这个控件的状态</li>
  <li>当某个控件命名存在却又没有显示出来 , 可以通过路径来辅助查找</li>
  <li>由服务器下发一些配置 , 使用 <code class="highlighter-rouge">Runtime</code> 去动态的修改已上线的项目</li>
</ul>

<p>下面将介绍如何使用代码来找出这些视图(控件)的路径</p>

<h3 id="分析控件的详细路径">分析控件的详细路径</h3>

<h4 id="1找出根-window-">1、找出根 <code class="highlighter-rouge">Window</code> :</h4>

<p>每一个视图、控件 , 他们最终的根都是main函数返回的 <code class="highlighter-rouge">application</code> , 通过 <code class="highlighter-rouge">[UIApplication sharedApplication]</code> 可以得到 。 <code class="highlighter-rouge">application</code> 的 <code class="highlighter-rouge">windows</code> 属性是一个数组 , 这里面装的是这个应用的所有 <code class="highlighter-rouge">Window</code> , 我们通常用的是第一个也就是 <code class="highlighter-rouge">application.windows[0]</code></p>

<h4 id="2遍历视图-">2、遍历视图 :</h4>

<p>得到了 <code class="highlighter-rouge">window</code> 对象一切都好办了 。 然后拿到 <code class="highlighter-rouge">window</code> 的 <code class="highlighter-rouge">rootViewController</code> , 在获取 <code class="highlighter-rouge">rootViewController</code> 里面所有的 <code class="highlighter-rouge">childViewControllers</code> 和 <code class="highlighter-rouge">view</code> 里的 <code class="highlighter-rouge">subviews</code> , 一直递归下去就可以得到当前屏幕里所有视图对象了 , 同时可以通过 <code class="highlighter-rouge">runtime</code> 把它们的 <code class="highlighter-rouge">property</code>、<code class="highlighter-rouge">delegate</code> 都获取出来。</p>

<p>结合 <code class="highlighter-rouge">Reveal</code> 或者 <code class="highlighter-rouge">Xcode</code> 自带的 <code class="highlighter-rouge">Captuer View Hiearachy</code> , 我们可以推测一下这两个的的实现原理了 :</p>

<p>1、根据应用得到根视图  <br />
2、递归获取里面的所有控件 <br />
3、按照他们的层级关系一层一层的画出来</p>

<h3 id="动态修改控件">动态修改控件</h3>

<p>1、把上面获取到的所有控件的详细信息上传到服务器 。 <br />
2、根据业务需求由服务器给我们下发对应的配置列表，以 <code class="highlighter-rouge">button</code> 为例 : 配置列表里必须要有 :</p>

<blockquote>
  <p>1)、<code class="highlighter-rouge">button</code> 的全路径 : 如 <code class="highlighter-rouge">UIWindow</code> -&gt; <code class="highlighter-rouge">UIWindow</code> -&gt; <code class="highlighter-rouge">UIView</code> -&gt; <code class="highlighter-rouge">UIView</code> -&gt; <code class="highlighter-rouge">UILayoutContainerView</code> -&gt; <code class="highlighter-rouge">UITabBar</code> -&gt; <code class="highlighter-rouge">UIView</code> —&gt; <code class="highlighter-rouge">UIButton</code></p>
</blockquote>

<blockquote>
  <p>2)、<code class="highlighter-rouge">button</code> 的唯一标识 : 如 <code class="highlighter-rouge">tag</code> 值或自己实现的一套算法生成的唯一标识 , 目的是防止与 <code class="highlighter-rouge">button</code> 同一层次的视图搞混 。</p>
</blockquote>

<blockquote>
  <p>3)、 根据路径及唯一标识来匹配 <code class="highlighter-rouge">App</code> 里的控件 , 匹配和上面的查找原理是相通的。</p>
</blockquote>

<blockquote>
  <p>4)、 匹配成功代表  <code class="highlighter-rouge">button</code> 确实存在 , 根据业务需求做后续操作 。</p>
</blockquote>

<blockquote>
  <p>提示: 匹配策略尽可能的多 , 防止意外情况某一两个标识生成失败或者生成相同 。</p>
</blockquote>

<p>3、修改 <code class="highlighter-rouge">button</code> 的状态。</p>

<blockquote>
  <p>1)、 如某个按钮点了会 <code class="highlighter-rouge">Crash</code> 或暂时不需要被点击 , 但是又要展示出来 , 可以直接修改 <code class="highlighter-rouge">button</code> 的 <code class="highlighter-rouge">enabled</code> 属性 。</p>
</blockquote>

<blockquote>
  <p>2)、 如某业务暂时关闭 , 可以直接修改入口 <code class="highlighter-rouge">按钮</code> frame为0 , 前提是要自动布局已做好 。</p>
</blockquote>

<blockquote>
  <p>3)、 如给购买 <code class="highlighter-rouge">按钮</code> 添加监听事件 <code class="highlighter-rouge">addTarget: action: forControlEvents:</code></p>
</blockquote>

<blockquote>
  <p><code class="highlighter-rouge">target</code> 也可以通过上面 <code class="highlighter-rouge">遍历视图</code> 获取到 , <code class="highlighter-rouge">action</code> 可以由服务器下发 , 也可以一开始就写死 , 等有需求的时候直接传不同的参数就行了 。</p>
</blockquote>

<p>4、 绑定查找控件时 , 这个界面必须要已经初始化完成了才行 , 假如界面还没生成肯定是查找不到这个控件的 。 这里给大家提供两种思路 :</p>

<blockquote>
  <p>1、使用Runtime <code class="highlighter-rouge">Method Swizzing</code> ,  直接把修改控件的方法与 <code class="highlighter-rouge">didMoveToSuperview</code> 和 <code class="highlighter-rouge">didMoveToWindow</code> 动态绑定 , 等这个控件加载出来之后再去修改 , 查找路径正确的话肯定就能找到了 。</p>
</blockquote>

<blockquote>
  <p>2、在具体的类里面 , 等控件的初始化方法调用完后 , 再去执行动态修改 , 如在<code class="highlighter-rouge">viewDidLoad</code> 里面初始化控件 , 在 <code class="highlighter-rouge">viewWillAppear:</code> 里面动态修改 。</p>
</blockquote>

<blockquote>
  <p>建议使用第一种适用范围更强 。</p>
</blockquote>

<p>上架后的 <code class="highlighter-rouge">应用</code> 可能会遇到的一些突发状况 , 未测出的<code class="highlighter-rouge">Crash</code>、临时改点小需求 , 等等 , 我们总不能每次因为一点小改动就重新提交一次 <code class="highlighter-rouge">App Store</code> , 先不说 <code class="highlighter-rouge">App Store</code> 的审核时间 , 频繁的让用户去更新应用 , 用户也会烦的 。使用这篇文章所讲的来实现动态更新是再合适不过了 。</p>

<p>首先上面讲的 <code class="highlighter-rouge">动态更新</code> 是完全脱离出来的一个模块 , 跟业务逻辑没有任何关系 , 只需要部署一次就行了 , 等开发下一个项目也可以直接拿过去使用 。这里的动态更新适用于局部的视图、控件的修改 , 如果你有其它需求可以考虑 <a href="https://github.com/bang590/JSPatch">JSPatch</a> , 下发脚本也是一个不错的选择 。</p>

<h3 id="工具篇">工具篇</h3>
<p>使用一些UI调试的辅助工具 , 使我们查看视图在项目中得层次结构更为方便 。      <br />
常用的UI调试的工具：</p>

<ul>
  <li>Captuer View Hiearachy</li>
  <li>Reveal</li>
</ul>

<p>Xcode自带的 <code class="highlighter-rouge">Captuer View Hiearachy</code> 实现步骤:</p>

<ul>
  <li>1、打开Xcode , 运行项目 , 选择最顶部的 <code class="highlighter-rouge">Debug</code></li>
  <li>2、<code class="highlighter-rouge">Debug</code> -&gt; <code class="highlighter-rouge">View Debugging</code> -&gt; <code class="highlighter-rouge">Show View Frames</code></li>
  <li>3、<code class="highlighter-rouge">Debug</code> -&gt; <code class="highlighter-rouge">View Debugging</code> -&gt; <code class="highlighter-rouge">Captuer View Hiearachy</code></li>
</ul>

<p>Xcode里面就变成了三维的视图了 , Xcode左侧展示出来的是层级关系的树状图 。</p>

<p>Reveal的功能相对来说更强大 , 适用于UI调试视图查找 。使用方法请看 <a href="http://support.revealapp.com/kb/getting-started/reveal">Reveal集成指南</a> 。</p>

<p><br /></p>

<p>转载请注明：<a href="http://baixin">潘柏信的博客</a> » <a href="http://baixin.io/2016/01/iOS_OTA/">点击阅读原文</a></p>

:ET